{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/davidlqlb/Desktop/project-fullstack-app/full_app_front/src/components/DetailsMetrics.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\nimport MetricsService from '../services/MetricsService';\nimport Chart from 'chart.js';\nimport '../styles/DetailsMetrics.css';\n\nclass DetailsMetrics extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      metricsInfo: []\n    };\n    this.service = new MetricsService();\n  }\n\n  componentDidMount() {\n    this.service.getAllMetrics(this.props.loggedInUser._id).then(result => {\n      this.setState({\n        metricsInfo: result\n      });\n      this.renderChart();\n    }).catch(err => {\n      console.log(err);\n    });\n  } // renderChart(){\n  //   const data = [\n  //     {\n  //       \"id\": \"japan\",\n  //       \"color\": \"hsl(40, 70%, 50%)\",\n  //       \"data\": [\n  //         {\n  //           \"x\": \"plane\",\n  //           \"y\": 46\n  //         },\n  //         {\n  //           \"x\": \"helicopter\",\n  //           \"y\": 216\n  //         },\n  //         {\n  //           \"x\": \"boat\",\n  //           \"y\": 33\n  //         },\n  //         {\n  //           \"x\": \"train\",\n  //           \"y\": 152\n  //         },\n  //         {\n  //           \"x\": \"subway\",\n  //           \"y\": 74\n  //         },\n  //         {\n  //           \"x\": \"bus\",\n  //           \"y\": 274\n  //         },\n  //         {\n  //           \"x\": \"car\",\n  //           \"y\": 196\n  //         },\n  //         {\n  //           \"x\": \"moto\",\n  //           \"y\": 60\n  //         },\n  //         {\n  //           \"x\": \"bicycle\",\n  //           \"y\": 2\n  //         },\n  //         {\n  //           \"x\": \"horse\",\n  //           \"y\": 64\n  //         },\n  //         {\n  //           \"x\": \"skateboard\",\n  //           \"y\": 295\n  //         },\n  //         {\n  //           \"x\": \"others\",\n  //           \"y\": 78\n  //         }\n  //       ]\n  //     },\n  //     {\n  //       \"id\": \"france\",\n  //       \"color\": \"hsl(56, 70%, 50%)\",\n  //       \"data\": [\n  //         {\n  //           \"x\": \"plane\",\n  //           \"y\": 251\n  //         },\n  //         {\n  //           \"x\": \"helicopter\",\n  //           \"y\": 210\n  //         },\n  //         {\n  //           \"x\": \"boat\",\n  //           \"y\": 23\n  //         },\n  //         {\n  //           \"x\": \"train\",\n  //           \"y\": 190\n  //         },\n  //         {\n  //           \"x\": \"subway\",\n  //           \"y\": 96\n  //         },\n  //         {\n  //           \"x\": \"bus\",\n  //           \"y\": 27\n  //         },\n  //         {\n  //           \"x\": \"car\",\n  //           \"y\": 87\n  //         },\n  //         {\n  //           \"x\": \"moto\",\n  //           \"y\": 258\n  //         },\n  //         {\n  //           \"x\": \"bicycle\",\n  //           \"y\": 158\n  //         },\n  //         {\n  //           \"x\": \"horse\",\n  //           \"y\": 66\n  //         },\n  //         {\n  //           \"x\": \"skateboard\",\n  //           \"y\": 42\n  //         },\n  //         {\n  //           \"x\": \"others\",\n  //           \"y\": 266\n  //         }\n  //       ]\n  //     },\n  //     {\n  //       \"id\": \"us\",\n  //       \"color\": \"hsl(73, 70%, 50%)\",\n  //       \"data\": [\n  //         {\n  //           \"x\": \"plane\",\n  //           \"y\": 161\n  //         },\n  //         {\n  //           \"x\": \"helicopter\",\n  //           \"y\": 116\n  //         },\n  //         {\n  //           \"x\": \"boat\",\n  //           \"y\": 95\n  //         },\n  //         {\n  //           \"x\": \"train\",\n  //           \"y\": 41\n  //         },\n  //         {\n  //           \"x\": \"subway\",\n  //           \"y\": 20\n  //         },\n  //         {\n  //           \"x\": \"bus\",\n  //           \"y\": 26\n  //         },\n  //         {\n  //           \"x\": \"car\",\n  //           \"y\": 46\n  //         },\n  //         {\n  //           \"x\": \"moto\",\n  //           \"y\": 15\n  //         },\n  //         {\n  //           \"x\": \"bicycle\",\n  //           \"y\": 67\n  //         },\n  //         {\n  //           \"x\": \"horse\",\n  //           \"y\": 76\n  //         },\n  //         {\n  //           \"x\": \"skateboard\",\n  //           \"y\": 158\n  //         },\n  //         {\n  //           \"x\": \"others\",\n  //           \"y\": 272\n  //         }\n  //       ]\n  //     },\n  //     {\n  //       \"id\": \"germany\",\n  //       \"color\": \"hsl(185, 70%, 50%)\",\n  //       \"data\": [\n  //         {\n  //           \"x\": \"plane\",\n  //           \"y\": 149\n  //         },\n  //         {\n  //           \"x\": \"helicopter\",\n  //           \"y\": 132\n  //         },\n  //         {\n  //           \"x\": \"boat\",\n  //           \"y\": 13\n  //         },\n  //         {\n  //           \"x\": \"train\",\n  //           \"y\": 165\n  //         },\n  //         {\n  //           \"x\": \"subway\",\n  //           \"y\": 44\n  //         },\n  //         {\n  //           \"x\": \"bus\",\n  //           \"y\": 49\n  //         },\n  //         {\n  //           \"x\": \"car\",\n  //           \"y\": 156\n  //         },\n  //         {\n  //           \"x\": \"moto\",\n  //           \"y\": 124\n  //         },\n  //         {\n  //           \"x\": \"bicycle\",\n  //           \"y\": 125\n  //         },\n  //         {\n  //           \"x\": \"horse\",\n  //           \"y\": 57\n  //         },\n  //         {\n  //           \"x\": \"skateboard\",\n  //           \"y\": 75\n  //         },\n  //         {\n  //           \"x\": \"others\",\n  //           \"y\": 281\n  //         }\n  //       ]\n  //     },\n  //     {\n  //       \"id\": \"norway\",\n  //       \"color\": \"hsl(127, 70%, 50%)\",\n  //       \"data\": [\n  //         {\n  //           \"x\": \"plane\",\n  //           \"y\": 254\n  //         },\n  //         {\n  //           \"x\": \"helicopter\",\n  //           \"y\": 146\n  //         },\n  //         {\n  //           \"x\": \"boat\",\n  //           \"y\": 103\n  //         },\n  //         {\n  //           \"x\": \"train\",\n  //           \"y\": 118\n  //         },\n  //         {\n  //           \"x\": \"subway\",\n  //           \"y\": 268\n  //         },\n  //         {\n  //           \"x\": \"bus\",\n  //           \"y\": 22\n  //         },\n  //         {\n  //           \"x\": \"car\",\n  //           \"y\": 124\n  //         },\n  //         {\n  //           \"x\": \"moto\",\n  //           \"y\": 205\n  //         },\n  //         {\n  //           \"x\": \"bicycle\",\n  //           \"y\": 281\n  //         },\n  //         {\n  //           \"x\": \"horse\",\n  //           \"y\": 204\n  //         },\n  //         {\n  //           \"x\": \"skateboard\",\n  //           \"y\": 181\n  //         },\n  //         {\n  //           \"x\": \"others\",\n  //           \"y\": 210\n  //         }\n  //       ]\n  //     }\n  //   ]\n  //   const MyResponsiveLine = ({ data }) => (\n  //     <ResponsiveLine\n  //         data={data}\n  //         margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n  //         xScale={{ type: 'point' }}\n  //         yScale={{ type: 'linear', min: 'auto', max: 'auto', stacked: true, reverse: false }}\n  //         yFormat=\" >-.2f\"\n  //         axisTop={null}\n  //         axisRight={null}\n  //         axisBottom={{\n  //             orient: 'bottom',\n  //             tickSize: 5,\n  //             tickPadding: 5,\n  //             tickRotation: 0,\n  //             legend: 'transportation',\n  //             legendOffset: 36,\n  //             legendPosition: 'middle'\n  //         }}\n  //         axisLeft={{\n  //             orient: 'left',\n  //             tickSize: 5,\n  //             tickPadding: 5,\n  //             tickRotation: 0,\n  //             legend: 'count',\n  //             legendOffset: -40,\n  //             legendPosition: 'middle'\n  //         }}\n  //         pointSize={10}\n  //         pointColor={{ theme: 'background' }}\n  //         pointBorderWidth={2}\n  //         pointBorderColor={{ from: 'serieColor' }}\n  //         pointLabelYOffset={-12}\n  //         useMesh={true}\n  //         legends={[\n  //             {\n  //                 anchor: 'bottom-right',\n  //                 direction: 'column',\n  //                 justify: false,\n  //                 translateX: 100,\n  //                 translateY: 0,\n  //                 itemsSpacing: 0,\n  //                 itemDirection: 'left-to-right',\n  //                 itemWidth: 80,\n  //                 itemHeight: 20,\n  //                 itemOpacity: 0.75,\n  //                 symbolSize: 12,\n  //                 symbolShape: 'circle',\n  //                 symbolBorderColor: 'rgba(0, 0, 0, .5)',\n  //                 effects: [\n  //                     {\n  //                         on: 'hover',\n  //                         style: {\n  //                             itemBackground: 'rgba(0, 0, 0, .03)',\n  //                             itemOpacity: 1\n  //                         }\n  //                     }\n  //                 ]\n  //             }\n  //         ]}\n  //     />\n  //   )\n  //   return MyResponsiveLine\n  // }\n\n\n  renderChart(data) {\n    console.log('RENDER CHART');\n    const absData = this.state.metricsInfo.map(element => {\n      return element.abs;\n    });\n    console.log(`dates array: ${absData}`);\n    const ctx = document.getElementById('myChart').getContext('2d');\n    const chart = new Chart(ctx, {\n      // The type of chart we want to create\n      type: 'line',\n      // The data for our dataset\n      data: {\n        labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n        datasets: [{\n          label: 'weight',\n          backgroundColor: 'rgba(87, 87, 205, 0.2)',\n          borderColor: 'rgb(87, 87, 205)',\n          data: [0, 10, 5, 2, 20, 30, 45]\n        }, {\n          label: 'shoulders',\n          backgroundColor: 'rgba(205, 87, 87, 0.2)',\n          borderColor: 'rgb(205, 87, 87)',\n          data: [0, 4, 6, 2, 14, 24, 60]\n        }, {\n          label: 'abs',\n          backgroundColor: 'rgba(87, 205, 139, 0.2)',\n          borderColor: 'rgb(87, 205, 139)',\n          data: [40, 38, 34, 55, 55, 50, 45]\n        }]\n      },\n      // Configuration options go here\n      options: {\n        aspectRatio: 1,\n        layout: {\n          padding: {\n            left: 10,\n            right: 10,\n            top: 10,\n            bottom: 10\n          }\n        },\n        legend: {\n          labels: {\n            boxWidth: 25,\n            padding: 20\n          }\n        }\n      }\n    });\n    return chart;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"DetailsMetrics\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"warning\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/add-new-metrics\",\n          children: \"new entry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"chart\",\n        id: \"myChart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default DetailsMetrics;","map":{"version":3,"sources":["/Users/davidlqlb/Desktop/project-fullstack-app/full_app_front/src/components/DetailsMetrics.js"],"names":["React","Link","Button","MetricsService","Chart","DetailsMetrics","Component","state","metricsInfo","service","componentDidMount","getAllMetrics","props","loggedInUser","_id","then","result","setState","renderChart","catch","err","console","log","data","absData","map","element","abs","ctx","document","getElementById","getContext","chart","type","labels","datasets","label","backgroundColor","borderColor","options","aspectRatio","layout","padding","left","right","top","bottom","legend","boxWidth","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\nimport MetricsService from '../services/MetricsService';\nimport Chart from 'chart.js';\nimport '../styles/DetailsMetrics.css'\n\n\n\n\nclass DetailsMetrics extends React.Component{\n\n  state = {\n    metricsInfo: []\n  }\n\n  service = new MetricsService()\n\n  \n  componentDidMount(){\n    \n    this.service.\n    getAllMetrics(this.props.loggedInUser._id) \n    .then((result)=>{\n      this.setState({metricsInfo: result})\n      this.renderChart()\n    })\n    .catch((err)=>{\n      console.log(err)\n    })\n  }\n\n  \n  // renderChart(){\n  //   const data = [\n  //     {\n  //       \"id\": \"japan\",\n  //       \"color\": \"hsl(40, 70%, 50%)\",\n  //       \"data\": [\n  //         {\n  //           \"x\": \"plane\",\n  //           \"y\": 46\n  //         },\n  //         {\n  //           \"x\": \"helicopter\",\n  //           \"y\": 216\n  //         },\n  //         {\n  //           \"x\": \"boat\",\n  //           \"y\": 33\n  //         },\n  //         {\n  //           \"x\": \"train\",\n  //           \"y\": 152\n  //         },\n  //         {\n  //           \"x\": \"subway\",\n  //           \"y\": 74\n  //         },\n  //         {\n  //           \"x\": \"bus\",\n  //           \"y\": 274\n  //         },\n  //         {\n  //           \"x\": \"car\",\n  //           \"y\": 196\n  //         },\n  //         {\n  //           \"x\": \"moto\",\n  //           \"y\": 60\n  //         },\n  //         {\n  //           \"x\": \"bicycle\",\n  //           \"y\": 2\n  //         },\n  //         {\n  //           \"x\": \"horse\",\n  //           \"y\": 64\n  //         },\n  //         {\n  //           \"x\": \"skateboard\",\n  //           \"y\": 295\n  //         },\n  //         {\n  //           \"x\": \"others\",\n  //           \"y\": 78\n  //         }\n  //       ]\n  //     },\n  //     {\n  //       \"id\": \"france\",\n  //       \"color\": \"hsl(56, 70%, 50%)\",\n  //       \"data\": [\n  //         {\n  //           \"x\": \"plane\",\n  //           \"y\": 251\n  //         },\n  //         {\n  //           \"x\": \"helicopter\",\n  //           \"y\": 210\n  //         },\n  //         {\n  //           \"x\": \"boat\",\n  //           \"y\": 23\n  //         },\n  //         {\n  //           \"x\": \"train\",\n  //           \"y\": 190\n  //         },\n  //         {\n  //           \"x\": \"subway\",\n  //           \"y\": 96\n  //         },\n  //         {\n  //           \"x\": \"bus\",\n  //           \"y\": 27\n  //         },\n  //         {\n  //           \"x\": \"car\",\n  //           \"y\": 87\n  //         },\n  //         {\n  //           \"x\": \"moto\",\n  //           \"y\": 258\n  //         },\n  //         {\n  //           \"x\": \"bicycle\",\n  //           \"y\": 158\n  //         },\n  //         {\n  //           \"x\": \"horse\",\n  //           \"y\": 66\n  //         },\n  //         {\n  //           \"x\": \"skateboard\",\n  //           \"y\": 42\n  //         },\n  //         {\n  //           \"x\": \"others\",\n  //           \"y\": 266\n  //         }\n  //       ]\n  //     },\n  //     {\n  //       \"id\": \"us\",\n  //       \"color\": \"hsl(73, 70%, 50%)\",\n  //       \"data\": [\n  //         {\n  //           \"x\": \"plane\",\n  //           \"y\": 161\n  //         },\n  //         {\n  //           \"x\": \"helicopter\",\n  //           \"y\": 116\n  //         },\n  //         {\n  //           \"x\": \"boat\",\n  //           \"y\": 95\n  //         },\n  //         {\n  //           \"x\": \"train\",\n  //           \"y\": 41\n  //         },\n  //         {\n  //           \"x\": \"subway\",\n  //           \"y\": 20\n  //         },\n  //         {\n  //           \"x\": \"bus\",\n  //           \"y\": 26\n  //         },\n  //         {\n  //           \"x\": \"car\",\n  //           \"y\": 46\n  //         },\n  //         {\n  //           \"x\": \"moto\",\n  //           \"y\": 15\n  //         },\n  //         {\n  //           \"x\": \"bicycle\",\n  //           \"y\": 67\n  //         },\n  //         {\n  //           \"x\": \"horse\",\n  //           \"y\": 76\n  //         },\n  //         {\n  //           \"x\": \"skateboard\",\n  //           \"y\": 158\n  //         },\n  //         {\n  //           \"x\": \"others\",\n  //           \"y\": 272\n  //         }\n  //       ]\n  //     },\n  //     {\n  //       \"id\": \"germany\",\n  //       \"color\": \"hsl(185, 70%, 50%)\",\n  //       \"data\": [\n  //         {\n  //           \"x\": \"plane\",\n  //           \"y\": 149\n  //         },\n  //         {\n  //           \"x\": \"helicopter\",\n  //           \"y\": 132\n  //         },\n  //         {\n  //           \"x\": \"boat\",\n  //           \"y\": 13\n  //         },\n  //         {\n  //           \"x\": \"train\",\n  //           \"y\": 165\n  //         },\n  //         {\n  //           \"x\": \"subway\",\n  //           \"y\": 44\n  //         },\n  //         {\n  //           \"x\": \"bus\",\n  //           \"y\": 49\n  //         },\n  //         {\n  //           \"x\": \"car\",\n  //           \"y\": 156\n  //         },\n  //         {\n  //           \"x\": \"moto\",\n  //           \"y\": 124\n  //         },\n  //         {\n  //           \"x\": \"bicycle\",\n  //           \"y\": 125\n  //         },\n  //         {\n  //           \"x\": \"horse\",\n  //           \"y\": 57\n  //         },\n  //         {\n  //           \"x\": \"skateboard\",\n  //           \"y\": 75\n  //         },\n  //         {\n  //           \"x\": \"others\",\n  //           \"y\": 281\n  //         }\n  //       ]\n  //     },\n  //     {\n  //       \"id\": \"norway\",\n  //       \"color\": \"hsl(127, 70%, 50%)\",\n  //       \"data\": [\n  //         {\n  //           \"x\": \"plane\",\n  //           \"y\": 254\n  //         },\n  //         {\n  //           \"x\": \"helicopter\",\n  //           \"y\": 146\n  //         },\n  //         {\n  //           \"x\": \"boat\",\n  //           \"y\": 103\n  //         },\n  //         {\n  //           \"x\": \"train\",\n  //           \"y\": 118\n  //         },\n  //         {\n  //           \"x\": \"subway\",\n  //           \"y\": 268\n  //         },\n  //         {\n  //           \"x\": \"bus\",\n  //           \"y\": 22\n  //         },\n  //         {\n  //           \"x\": \"car\",\n  //           \"y\": 124\n  //         },\n  //         {\n  //           \"x\": \"moto\",\n  //           \"y\": 205\n  //         },\n  //         {\n  //           \"x\": \"bicycle\",\n  //           \"y\": 281\n  //         },\n  //         {\n  //           \"x\": \"horse\",\n  //           \"y\": 204\n  //         },\n  //         {\n  //           \"x\": \"skateboard\",\n  //           \"y\": 181\n  //         },\n  //         {\n  //           \"x\": \"others\",\n  //           \"y\": 210\n  //         }\n  //       ]\n  //     }\n  //   ]\n\n  //   const MyResponsiveLine = ({ data }) => (\n  //     <ResponsiveLine\n  //         data={data}\n  //         margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n  //         xScale={{ type: 'point' }}\n  //         yScale={{ type: 'linear', min: 'auto', max: 'auto', stacked: true, reverse: false }}\n  //         yFormat=\" >-.2f\"\n  //         axisTop={null}\n  //         axisRight={null}\n  //         axisBottom={{\n  //             orient: 'bottom',\n  //             tickSize: 5,\n  //             tickPadding: 5,\n  //             tickRotation: 0,\n  //             legend: 'transportation',\n  //             legendOffset: 36,\n  //             legendPosition: 'middle'\n  //         }}\n  //         axisLeft={{\n  //             orient: 'left',\n  //             tickSize: 5,\n  //             tickPadding: 5,\n  //             tickRotation: 0,\n  //             legend: 'count',\n  //             legendOffset: -40,\n  //             legendPosition: 'middle'\n  //         }}\n  //         pointSize={10}\n  //         pointColor={{ theme: 'background' }}\n  //         pointBorderWidth={2}\n  //         pointBorderColor={{ from: 'serieColor' }}\n  //         pointLabelYOffset={-12}\n  //         useMesh={true}\n  //         legends={[\n  //             {\n  //                 anchor: 'bottom-right',\n  //                 direction: 'column',\n  //                 justify: false,\n  //                 translateX: 100,\n  //                 translateY: 0,\n  //                 itemsSpacing: 0,\n  //                 itemDirection: 'left-to-right',\n  //                 itemWidth: 80,\n  //                 itemHeight: 20,\n  //                 itemOpacity: 0.75,\n  //                 symbolSize: 12,\n  //                 symbolShape: 'circle',\n  //                 symbolBorderColor: 'rgba(0, 0, 0, .5)',\n  //                 effects: [\n  //                     {\n  //                         on: 'hover',\n  //                         style: {\n  //                             itemBackground: 'rgba(0, 0, 0, .03)',\n  //                             itemOpacity: 1\n  //                         }\n  //                     }\n  //                 ]\n  //             }\n  //         ]}\n  //     />\n  //   )\n  //   return MyResponsiveLine\n  // }\n\n\n  renderChart(data){\n    console.log('RENDER CHART')\n\n      const absData = this.state.metricsInfo.map((element)=>{\n        return element.abs\n      })\n\n      console.log(`dates array: ${absData}`)\n\n      const ctx = document.getElementById('myChart').getContext('2d');\n      \n      const chart = new Chart(ctx, {\n          // The type of chart we want to create\n          type: 'line',\n\n          // The data for our dataset\n          data: {\n              labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n              datasets: [\n                {\n                  label: 'weight',\n                  backgroundColor: 'rgba(87, 87, 205, 0.2)',\n                  borderColor: 'rgb(87, 87, 205)',\n                  data: [0, 10, 5, 2, 20, 30, 45]\n                },\n                {\n                  label: 'shoulders',\n                  backgroundColor: 'rgba(205, 87, 87, 0.2)',\n                  borderColor: 'rgb(205, 87, 87)',\n                  data: [0, 4, 6, 2, 14, 24, 60]\n                },\n                {\n                  label: 'abs',\n                  backgroundColor: 'rgba(87, 205, 139, 0.2)',\n                  borderColor: 'rgb(87, 205, 139)',\n                  data: [40, 38, 34, 55, 55, 50, 45]\n                }\n              ]\n          },\n\n          // Configuration options go here\n          options: {\n            aspectRatio: 1,\n            layout: {\n              padding: {\n                left: 10,\n                right: 10,\n                top: 10,\n                bottom: 10\n              }\n            },\n            legend: {\n              labels: {\n                boxWidth: 25,\n                padding: 20\n              }\n            }\n          }\n      });\n\n      return chart\n  }\n\n\n  render(){\n    return(\n      <div className=\"DetailsMetrics\">\n        <Button variant=\"warning\">\n          <Link to=\"/add-new-metrics\">new entry</Link>\n        </Button>\n        <canvas className=\"chart\" id=\"myChart\"></canvas>\n      </div>\n    )    \n  }\n}\n\nexport default DetailsMetrics"]},"metadata":{},"sourceType":"module"}