{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/davidlqlb/Desktop/project-fullstack-app/full_app_front/src/components/DetailsMetrics.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\nimport MetricsService from '../services/MetricsService';\nimport Chart from 'chart.js';\nimport '../styles/DetailsMetrics.css';\n\nclass DetailsMetrics extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      metricsInfo: []\n    };\n    this.service = new MetricsService();\n\n    this.renderLoadingImage = () => {\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"\",\n        alt: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 12\n      }, this); //=> url SPINNER DE CARGA\n    };\n  }\n\n  componentDidMount() {\n    this.service.getAllMetrics(this.props.loggedInUser._id).then(result => {\n      this.setState({\n        metricsInfo: result\n      });\n      this.renderChart();\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  renderChart(data) {\n    console.log('RENDER CHART');\n    const weightData = this.state.metricsInfo.map(element => {\n      return element.weight;\n    });\n    const shouldersData = this.state.metricsInfo.map(element => {\n      return element.shoulders;\n    });\n    const absData = this.state.metricsInfo.map(element => {\n      return element.abs;\n    });\n    const cuadricepsData = this.state.metricsInfo.map(element => {\n      return element.cuadriceps;\n    });\n    const dateData = this.state.metricsInfo.map(element => {\n      return element.date;\n    }); // const sortedData = this.state.metricsInfo.sort((a, b) => {\n    //     a = a.date.split('/').join('');\n    //     b = b.date.split('/').join('');\n    //     return a > b ? 1 : a < b ? -1 : 0;\n    // })\n    //  console.log(`sorted data: ${dateData}`)\n\n    const ctx = document.getElementById('myChart').getContext('2d');\n    const chart = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: dateData,\n        datasets: [{\n          label: 'weight',\n          backgroundColor: 'rgba(87, 87, 205, 0.2)',\n          borderColor: 'rgb(87, 87, 205)',\n          data: weightData\n        }, {\n          label: 'shoulders',\n          backgroundColor: 'rgba(205, 87, 87, 0.2)',\n          borderColor: 'rgb(205, 87, 87)',\n          data: shouldersData\n        }, {\n          label: 'abs',\n          backgroundColor: 'rgba(87, 205, 139, 0.2)',\n          borderColor: 'rgb(87, 205, 139)',\n          data: absData\n        }, {\n          label: 'cuadriceps',\n          backgroundColor: 'rgba(205, 196, 87, 0.2)',\n          borderColor: 'rgb(205, 196, 87)',\n          data: cuadricepsData\n        }]\n      },\n      // Configuration options go here\n      options: {\n        aspectRatio: 1,\n        layout: {\n          padding: {\n            left: 10,\n            right: 10,\n            top: 10,\n            bottom: 10\n          }\n        },\n        legend: {\n          labels: {\n            boxWidth: 25,\n            padding: 20\n          }\n        }\n      }\n    });\n    return chart;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"DetailsMetrics\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"warning\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/add-new-metrics\",\n          children: \"new entry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"all-exercises-container\",\n        children: this.state.metricsInfo.length === 0 ? this.renderLoadingImage() : /*#__PURE__*/_jsxDEV(\"canvas\", {\n          className: \"metrics-chart\",\n          id: \"myChart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default DetailsMetrics;","map":{"version":3,"sources":["/Users/davidlqlb/Desktop/project-fullstack-app/full_app_front/src/components/DetailsMetrics.js"],"names":["React","Link","Button","MetricsService","Chart","DetailsMetrics","Component","state","metricsInfo","service","renderLoadingImage","componentDidMount","getAllMetrics","props","loggedInUser","_id","then","result","setState","renderChart","catch","err","console","log","data","weightData","map","element","weight","shouldersData","shoulders","absData","abs","cuadricepsData","cuadriceps","dateData","date","ctx","document","getElementById","getContext","chart","type","labels","datasets","label","backgroundColor","borderColor","options","aspectRatio","layout","padding","left","right","top","bottom","legend","boxWidth","render","length"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\nimport MetricsService from '../services/MetricsService';\nimport Chart from 'chart.js';\nimport '../styles/DetailsMetrics.css'\n\n\nclass DetailsMetrics extends React.Component{\n\n  state = {\n    metricsInfo: []\n  }\n\n  service = new MetricsService()\n\n  \n  componentDidMount(){\n    \n    this.service.\n    getAllMetrics(this.props.loggedInUser._id) \n    .then((result)=>{\n      this.setState({metricsInfo: result})\n      this.renderChart()\n    })\n    .catch((err)=>{\n      console.log(err)\n    })\n  }\n\n\n  renderChart(data){\n    console.log('RENDER CHART')\n\n      const weightData = this.state.metricsInfo.map((element)=>{\n        return element.weight\n      })\n\n      const shouldersData = this.state.metricsInfo.map((element)=>{\n        return element.shoulders\n      })\n\n      const absData = this.state.metricsInfo.map((element)=>{\n        return element.abs\n      })\n\n      const cuadricepsData = this.state.metricsInfo.map((element)=>{\n        return element.cuadriceps\n      })\n\n      const dateData = this.state.metricsInfo.map((element)=>{\n        return element.date\n      })\n\n      // const sortedData = this.state.metricsInfo.sort((a, b) => {\n      //     a = a.date.split('/').join('');\n      //     b = b.date.split('/').join('');\n      //     return a > b ? 1 : a < b ? -1 : 0;\n        \n      // })\n      //  console.log(`sorted data: ${dateData}`)\n\n      const ctx = document.getElementById('myChart').getContext('2d');\n      \n      const chart = new Chart(ctx, {\n          type: 'line',\n          \n          data: {\n              labels: dateData,\n              datasets: [\n                {\n                  label: 'weight',\n                  backgroundColor: 'rgba(87, 87, 205, 0.2)',\n                  borderColor: 'rgb(87, 87, 205)',\n                  data: weightData\n                },{\n                  label: 'shoulders',\n                  backgroundColor: 'rgba(205, 87, 87, 0.2)',\n                  borderColor: 'rgb(205, 87, 87)',\n                  data: shouldersData\n                },{\n                  label: 'abs',\n                  backgroundColor: 'rgba(87, 205, 139, 0.2)',\n                  borderColor: 'rgb(87, 205, 139)',\n                  data: absData\n                },{\n                  label: 'cuadriceps',\n                  backgroundColor: 'rgba(205, 196, 87, 0.2)',\n                  borderColor: 'rgb(205, 196, 87)',\n                  data: cuadricepsData\n                }\n              ]\n          },\n\n          // Configuration options go here\n          options: {\n            aspectRatio: 1,\n            layout: {\n              padding: {\n                left: 10,\n                right: 10,\n                top: 10,\n                bottom: 10\n              }\n            },\n            legend: {\n              labels: {\n                boxWidth: 25,\n                padding: 20\n              }\n            }\n          }\n      });\n\n      return chart\n  }\n\n  renderLoadingImage = ()=>{\n    return <img src=\"\" alt=\"Loading\"/> //=> url SPINNER DE CARGA\n  }\n\n\n  render(){\n    return(\n      <div className=\"DetailsMetrics\">\n        <Button variant=\"warning\">\n          <Link to=\"/add-new-metrics\">new entry</Link>\n        </Button>\n        <div className=\"all-exercises-container\">\n          {this.state.metricsInfo.length === 0 \n            ? this.renderLoadingImage() \n            : <canvas className=\"metrics-chart\" id=\"myChart\"></canvas>}          \n        </div>\n        \n      </div>\n    )    \n  }\n}\n\nexport default DetailsMetrics"]},"metadata":{},"sourceType":"module"}