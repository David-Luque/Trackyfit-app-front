{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/davidlqlb/Desktop/clon-proyecto-jaime/full_app_front/src/components/DetailsMetrics.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport MetricsService from '../services/MetricsService'; // import { ResponsiveLine } from '@nivo/line'\n\nclass DetailsMetrics extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      metricsInfo: []\n    };\n    this.service = new MetricsService();\n  }\n\n  componentDidMount() {\n    this.service.getAllMetrics(this.props.loggedInUser._id) //=> LLAMADA A MI API PARA DEVOLVER TODOS LOS EJERCICIOS DEL USUARIO ACTIVO\n    .then(data => {\n      return data.json();\n    }).then(dataJSON => {\n      this.setState({\n        metricsInfo: dataJSON.results\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  } // renderGraphics(){\n  //   const MyResponsiveLine = ({ data /* see data tab */ }) => (\n  //       <ResponsiveLine\n  //           data={data}\n  //           margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n  //           xScale={{ type: 'point' }}\n  //           yScale={{ type: 'linear', min: 'auto', max: 'auto', stacked: true, reverse: false }}\n  //           yFormat=\" >-.2f\"\n  //           axisTop={null}\n  //           axisRight={null}\n  //           axisBottom={{\n  //               orient: 'bottom',\n  //               tickSize: 5,\n  //               tickPadding: 5,\n  //               tickRotation: 0,\n  //               legend: 'transportation',\n  //               legendOffset: 36,\n  //               legendPosition: 'middle'\n  //           }}\n  //           axisLeft={{\n  //               orient: 'left',\n  //               tickSize: 5,\n  //               tickPadding: 5,\n  //               tickRotation: 0,\n  //               legend: 'count',\n  //               legendOffset: -40,\n  //               legendPosition: 'middle'\n  //           }}\n  //           pointSize={10}\n  //           pointColor={{ theme: 'background' }}\n  //           pointBorderWidth={2}\n  //           pointBorderColor={{ from: 'serieColor' }}\n  //           pointLabelYOffset={-12}\n  //           useMesh={true}\n  //           legends={[\n  //               {\n  //                   anchor: 'bottom-right',\n  //                   direction: 'column',\n  //                   justify: false,\n  //                   translateX: 100,\n  //                   translateY: 0,\n  //                   itemsSpacing: 0,\n  //                   itemDirection: 'left-to-right',\n  //                   itemWidth: 80,\n  //                   itemHeight: 20,\n  //                   itemOpacity: 0.75,\n  //                   symbolSize: 12,\n  //                   symbolShape: 'circle',\n  //                   symbolBorderColor: 'rgba(0, 0, 0, .5)',\n  //                   effects: [\n  //                       {\n  //                           on: 'hover',\n  //                           style: {\n  //                               itemBackground: 'rgba(0, 0, 0, .03)',\n  //                               itemOpacity: 1\n  //                           }\n  //                       }\n  //                   ]\n  //               }\n  //           ]}\n  //       />\n  //   )\n  //   Actions Logs\n  //   click[point] serie: japan, x: subway, y: 16{ … }\n  //   Base\n  // }\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"DetailsMetrics\",\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/add-new-metrics\",\n        children: \"ADD NEW ENTRY\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default DetailsMetrics;","map":{"version":3,"sources":["/Users/davidlqlb/Desktop/clon-proyecto-jaime/full_app_front/src/components/DetailsMetrics.js"],"names":["React","Link","MetricsService","DetailsMetrics","Component","state","metricsInfo","service","componentDidMount","getAllMetrics","props","loggedInUser","_id","then","data","json","dataJSON","setState","results","catch","err","console","log","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,cAAP,MAA2B,4BAA3B,C,CACA;;AAGA,MAAMC,cAAN,SAA6BH,KAAK,CAACI,SAAnC,CAA4C;AAAA;AAAA;AAAA,SAE1CC,KAF0C,GAElC;AACNC,MAAAA,WAAW,EAAE;AADP,KAFkC;AAAA,SAM1CC,OAN0C,GAMhC,IAAIL,cAAJ,EANgC;AAAA;;AAW1CM,EAAAA,iBAAiB,GAAE;AACjB,SAAKD,OAAL,CACAE,aADA,CACc,KAAKC,KAAL,CAAWC,YAAX,CAAwBC,GADtC,EAC2C;AAD3C,KAECC,IAFD,CAEOC,IAAD,IAAQ;AACZ,aAAOA,IAAI,CAACC,IAAL,EAAP;AACD,KAJD,EAKCF,IALD,CAKOG,QAAD,IAAY;AAChB,WAAKC,QAAL,CAAc;AAACX,QAAAA,WAAW,EAAEU,QAAQ,CAACE;AAAvB,OAAd;AACD,KAPD,EAQCC,KARD,CAQQC,GAAD,IAAO;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KAVD;AAWD,GAvByC,CA0B1C;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;AAKEG,EAAAA,MAAM,GAAE;AACN,wBACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,EAAE,EAAC,kBAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAzGyC;;AA4G5C,eAAepB,cAAf","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom';\nimport MetricsService from '../services/MetricsService';\n// import { ResponsiveLine } from '@nivo/line'\n\n\nclass DetailsMetrics extends React.Component{\n\n  state = {\n    metricsInfo: []\n  }\n\n  service = new MetricsService()\n\n\n  \n\n  componentDidMount(){\n    this.service.\n    getAllMetrics(this.props.loggedInUser._id) //=> LLAMADA A MI API PARA DEVOLVER TODOS LOS EJERCICIOS DEL USUARIO ACTIVO\n    .then((data)=>{\n      return data.json()\n    })\n    .then((dataJSON)=>{\n      this.setState({metricsInfo: dataJSON.results})\n    })\n    .catch((err)=>{\n      console.log(err)\n    })\n  }\n\n\n  // renderGraphics(){\n\n//   const MyResponsiveLine = ({ data /* see data tab */ }) => (\n//       <ResponsiveLine\n//           data={data}\n//           margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n//           xScale={{ type: 'point' }}\n//           yScale={{ type: 'linear', min: 'auto', max: 'auto', stacked: true, reverse: false }}\n//           yFormat=\" >-.2f\"\n//           axisTop={null}\n//           axisRight={null}\n//           axisBottom={{\n//               orient: 'bottom',\n//               tickSize: 5,\n//               tickPadding: 5,\n//               tickRotation: 0,\n//               legend: 'transportation',\n//               legendOffset: 36,\n//               legendPosition: 'middle'\n//           }}\n//           axisLeft={{\n//               orient: 'left',\n//               tickSize: 5,\n//               tickPadding: 5,\n//               tickRotation: 0,\n//               legend: 'count',\n//               legendOffset: -40,\n//               legendPosition: 'middle'\n//           }}\n//           pointSize={10}\n//           pointColor={{ theme: 'background' }}\n//           pointBorderWidth={2}\n//           pointBorderColor={{ from: 'serieColor' }}\n//           pointLabelYOffset={-12}\n//           useMesh={true}\n//           legends={[\n//               {\n//                   anchor: 'bottom-right',\n//                   direction: 'column',\n//                   justify: false,\n//                   translateX: 100,\n//                   translateY: 0,\n//                   itemsSpacing: 0,\n//                   itemDirection: 'left-to-right',\n//                   itemWidth: 80,\n//                   itemHeight: 20,\n//                   itemOpacity: 0.75,\n//                   symbolSize: 12,\n//                   symbolShape: 'circle',\n//                   symbolBorderColor: 'rgba(0, 0, 0, .5)',\n//                   effects: [\n//                       {\n//                           on: 'hover',\n//                           style: {\n//                               itemBackground: 'rgba(0, 0, 0, .03)',\n//                               itemOpacity: 1\n//                           }\n//                       }\n//                   ]\n//               }\n//           ]}\n//       />\n//   )\n\n//   Actions Logs\n//   click[point] serie: japan, x: subway, y: 16{ … }\n//   Base\n\n// }\n\n\n\n\n  render(){\n    return(\n      <div className=\"DetailsMetrics\">\n        <Link to=\"/add-new-metrics\">ADD NEW ENTRY</Link>\n      </div>\n    )    \n  }\n}\n\nexport default DetailsMetrics"]},"metadata":{},"sourceType":"module"}