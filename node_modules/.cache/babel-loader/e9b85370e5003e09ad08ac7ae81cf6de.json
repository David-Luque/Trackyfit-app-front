{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/davidlqlb/Desktop/project-fullstack-app/full_app_front/src/components/DetailsMetrics.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\nimport MetricsService from '../services/MetricsService'; // import { ResponsiveLine } from '@nivo/line'\n\nimport Chart from 'chart.js';\n\nclass DetailsMetrics extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      metricsInfo: []\n    };\n    this.service = new MetricsService();\n  }\n\n  componentDidMount() {\n    this.renderChart();\n    this.service.getAllMetrics(this.props.loggedInUser._id) //=> LLAMADA A MI API PARA DEVOLVER TODOS LOS EJERCICIOS DEL USUARIO ACTIVO\n    .then(data => {\n      return data.json();\n    }).then(dataJSON => {\n      this.setState({\n        metricsInfo: dataJSON.results\n      });\n    }) // .then(result => {\n    // })\n    .catch(err => {\n      console.log(err);\n    });\n  } // renderChart(){\n  //   const data = [\n  //     {\n  //       \"id\": \"japan\",\n  //       \"color\": \"hsl(40, 70%, 50%)\",\n  //       \"data\": [\n  //         {\n  //           \"x\": \"plane\",\n  //           \"y\": 46\n  //         },\n  //         {\n  //           \"x\": \"helicopter\",\n  //           \"y\": 216\n  //         },\n  //         {\n  //           \"x\": \"boat\",\n  //           \"y\": 33\n  //         },\n  //         {\n  //           \"x\": \"train\",\n  //           \"y\": 152\n  //         },\n  //         {\n  //           \"x\": \"subway\",\n  //           \"y\": 74\n  //         },\n  //         {\n  //           \"x\": \"bus\",\n  //           \"y\": 274\n  //         },\n  //         {\n  //           \"x\": \"car\",\n  //           \"y\": 196\n  //         },\n  //         {\n  //           \"x\": \"moto\",\n  //           \"y\": 60\n  //         },\n  //         {\n  //           \"x\": \"bicycle\",\n  //           \"y\": 2\n  //         },\n  //         {\n  //           \"x\": \"horse\",\n  //           \"y\": 64\n  //         },\n  //         {\n  //           \"x\": \"skateboard\",\n  //           \"y\": 295\n  //         },\n  //         {\n  //           \"x\": \"others\",\n  //           \"y\": 78\n  //         }\n  //       ]\n  //     },\n  //     {\n  //       \"id\": \"france\",\n  //       \"color\": \"hsl(56, 70%, 50%)\",\n  //       \"data\": [\n  //         {\n  //           \"x\": \"plane\",\n  //           \"y\": 251\n  //         },\n  //         {\n  //           \"x\": \"helicopter\",\n  //           \"y\": 210\n  //         },\n  //         {\n  //           \"x\": \"boat\",\n  //           \"y\": 23\n  //         },\n  //         {\n  //           \"x\": \"train\",\n  //           \"y\": 190\n  //         },\n  //         {\n  //           \"x\": \"subway\",\n  //           \"y\": 96\n  //         },\n  //         {\n  //           \"x\": \"bus\",\n  //           \"y\": 27\n  //         },\n  //         {\n  //           \"x\": \"car\",\n  //           \"y\": 87\n  //         },\n  //         {\n  //           \"x\": \"moto\",\n  //           \"y\": 258\n  //         },\n  //         {\n  //           \"x\": \"bicycle\",\n  //           \"y\": 158\n  //         },\n  //         {\n  //           \"x\": \"horse\",\n  //           \"y\": 66\n  //         },\n  //         {\n  //           \"x\": \"skateboard\",\n  //           \"y\": 42\n  //         },\n  //         {\n  //           \"x\": \"others\",\n  //           \"y\": 266\n  //         }\n  //       ]\n  //     },\n  //     {\n  //       \"id\": \"us\",\n  //       \"color\": \"hsl(73, 70%, 50%)\",\n  //       \"data\": [\n  //         {\n  //           \"x\": \"plane\",\n  //           \"y\": 161\n  //         },\n  //         {\n  //           \"x\": \"helicopter\",\n  //           \"y\": 116\n  //         },\n  //         {\n  //           \"x\": \"boat\",\n  //           \"y\": 95\n  //         },\n  //         {\n  //           \"x\": \"train\",\n  //           \"y\": 41\n  //         },\n  //         {\n  //           \"x\": \"subway\",\n  //           \"y\": 20\n  //         },\n  //         {\n  //           \"x\": \"bus\",\n  //           \"y\": 26\n  //         },\n  //         {\n  //           \"x\": \"car\",\n  //           \"y\": 46\n  //         },\n  //         {\n  //           \"x\": \"moto\",\n  //           \"y\": 15\n  //         },\n  //         {\n  //           \"x\": \"bicycle\",\n  //           \"y\": 67\n  //         },\n  //         {\n  //           \"x\": \"horse\",\n  //           \"y\": 76\n  //         },\n  //         {\n  //           \"x\": \"skateboard\",\n  //           \"y\": 158\n  //         },\n  //         {\n  //           \"x\": \"others\",\n  //           \"y\": 272\n  //         }\n  //       ]\n  //     },\n  //     {\n  //       \"id\": \"germany\",\n  //       \"color\": \"hsl(185, 70%, 50%)\",\n  //       \"data\": [\n  //         {\n  //           \"x\": \"plane\",\n  //           \"y\": 149\n  //         },\n  //         {\n  //           \"x\": \"helicopter\",\n  //           \"y\": 132\n  //         },\n  //         {\n  //           \"x\": \"boat\",\n  //           \"y\": 13\n  //         },\n  //         {\n  //           \"x\": \"train\",\n  //           \"y\": 165\n  //         },\n  //         {\n  //           \"x\": \"subway\",\n  //           \"y\": 44\n  //         },\n  //         {\n  //           \"x\": \"bus\",\n  //           \"y\": 49\n  //         },\n  //         {\n  //           \"x\": \"car\",\n  //           \"y\": 156\n  //         },\n  //         {\n  //           \"x\": \"moto\",\n  //           \"y\": 124\n  //         },\n  //         {\n  //           \"x\": \"bicycle\",\n  //           \"y\": 125\n  //         },\n  //         {\n  //           \"x\": \"horse\",\n  //           \"y\": 57\n  //         },\n  //         {\n  //           \"x\": \"skateboard\",\n  //           \"y\": 75\n  //         },\n  //         {\n  //           \"x\": \"others\",\n  //           \"y\": 281\n  //         }\n  //       ]\n  //     },\n  //     {\n  //       \"id\": \"norway\",\n  //       \"color\": \"hsl(127, 70%, 50%)\",\n  //       \"data\": [\n  //         {\n  //           \"x\": \"plane\",\n  //           \"y\": 254\n  //         },\n  //         {\n  //           \"x\": \"helicopter\",\n  //           \"y\": 146\n  //         },\n  //         {\n  //           \"x\": \"boat\",\n  //           \"y\": 103\n  //         },\n  //         {\n  //           \"x\": \"train\",\n  //           \"y\": 118\n  //         },\n  //         {\n  //           \"x\": \"subway\",\n  //           \"y\": 268\n  //         },\n  //         {\n  //           \"x\": \"bus\",\n  //           \"y\": 22\n  //         },\n  //         {\n  //           \"x\": \"car\",\n  //           \"y\": 124\n  //         },\n  //         {\n  //           \"x\": \"moto\",\n  //           \"y\": 205\n  //         },\n  //         {\n  //           \"x\": \"bicycle\",\n  //           \"y\": 281\n  //         },\n  //         {\n  //           \"x\": \"horse\",\n  //           \"y\": 204\n  //         },\n  //         {\n  //           \"x\": \"skateboard\",\n  //           \"y\": 181\n  //         },\n  //         {\n  //           \"x\": \"others\",\n  //           \"y\": 210\n  //         }\n  //       ]\n  //     }\n  //   ]\n  //   const MyResponsiveLine = ({ data }) => (\n  //     <ResponsiveLine\n  //         data={data}\n  //         margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n  //         xScale={{ type: 'point' }}\n  //         yScale={{ type: 'linear', min: 'auto', max: 'auto', stacked: true, reverse: false }}\n  //         yFormat=\" >-.2f\"\n  //         axisTop={null}\n  //         axisRight={null}\n  //         axisBottom={{\n  //             orient: 'bottom',\n  //             tickSize: 5,\n  //             tickPadding: 5,\n  //             tickRotation: 0,\n  //             legend: 'transportation',\n  //             legendOffset: 36,\n  //             legendPosition: 'middle'\n  //         }}\n  //         axisLeft={{\n  //             orient: 'left',\n  //             tickSize: 5,\n  //             tickPadding: 5,\n  //             tickRotation: 0,\n  //             legend: 'count',\n  //             legendOffset: -40,\n  //             legendPosition: 'middle'\n  //         }}\n  //         pointSize={10}\n  //         pointColor={{ theme: 'background' }}\n  //         pointBorderWidth={2}\n  //         pointBorderColor={{ from: 'serieColor' }}\n  //         pointLabelYOffset={-12}\n  //         useMesh={true}\n  //         legends={[\n  //             {\n  //                 anchor: 'bottom-right',\n  //                 direction: 'column',\n  //                 justify: false,\n  //                 translateX: 100,\n  //                 translateY: 0,\n  //                 itemsSpacing: 0,\n  //                 itemDirection: 'left-to-right',\n  //                 itemWidth: 80,\n  //                 itemHeight: 20,\n  //                 itemOpacity: 0.75,\n  //                 symbolSize: 12,\n  //                 symbolShape: 'circle',\n  //                 symbolBorderColor: 'rgba(0, 0, 0, .5)',\n  //                 effects: [\n  //                     {\n  //                         on: 'hover',\n  //                         style: {\n  //                             itemBackground: 'rgba(0, 0, 0, .03)',\n  //                             itemOpacity: 1\n  //                         }\n  //                     }\n  //                 ]\n  //             }\n  //         ]}\n  //     />\n  //   )\n  //   return MyResponsiveLine\n  // }\n\n\n  renderChart(data) {\n    console.log('RENDER CHART');\n    const ctx = document.getElementById('myChart').getContext('2d');\n    const chart = new Chart(ctx, {\n      // The type of chart we want to create\n      type: 'line',\n      // The data for our dataset\n      data: {\n        labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n        datasets: [{\n          label: 'First dataset',\n          backgroundColor: 'rgb(255, 99, 132)',\n          borderColor: 'rgb(255, 99, 132)',\n          data: [0, 10, 5, 2, 20, 30, 45]\n        }, {\n          label: 'second dataset',\n          backgroundColor: 'rgb(25, 99, 132)',\n          borderColor: 'rgb(255, 99, 13)',\n          data: [0, 4, 6, 2, 14, 24, 60]\n        }, {\n          label: 'third dataset',\n          backgroundColor: 'rgb(150, 99, 60)',\n          borderColor: 'rgb(110, 99, 45)',\n          data: [40, 38, 34, 55, 55, 50, 45]\n        }]\n      },\n      // Configuration options go here\n      options: {}\n    });\n    return chart;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"DetailsMetrics\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"warning\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/add-new-metrics\",\n          children: \"Add new entry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"myChart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default DetailsMetrics;","map":{"version":3,"sources":["/Users/davidlqlb/Desktop/project-fullstack-app/full_app_front/src/components/DetailsMetrics.js"],"names":["React","Link","Button","MetricsService","Chart","DetailsMetrics","Component","state","metricsInfo","service","componentDidMount","renderChart","getAllMetrics","props","loggedInUser","_id","then","data","json","dataJSON","setState","results","catch","err","console","log","ctx","document","getElementById","getContext","chart","type","labels","datasets","label","backgroundColor","borderColor","options","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\nimport MetricsService from '../services/MetricsService';\n// import { ResponsiveLine } from '@nivo/line'\nimport Chart from 'chart.js';\n\n\n\n\nclass DetailsMetrics extends React.Component{\n\n  state = {\n    metricsInfo: []\n  }\n\n  service = new MetricsService()\n\n  \n  componentDidMount(){\n    this.renderChart()\n    this.service.\n    getAllMetrics(this.props.loggedInUser._id) //=> LLAMADA A MI API PARA DEVOLVER TODOS LOS EJERCICIOS DEL USUARIO ACTIVO\n    .then((data)=>{\n      return data.json()\n    })\n    .then((dataJSON)=>{\n      this.setState({metricsInfo: dataJSON.results})\n    })\n      // .then(result => {\n        \n      // })\n    .catch((err)=>{\n      console.log(err)\n    })\n  }\n\n  \n  // renderChart(){\n  //   const data = [\n  //     {\n  //       \"id\": \"japan\",\n  //       \"color\": \"hsl(40, 70%, 50%)\",\n  //       \"data\": [\n  //         {\n  //           \"x\": \"plane\",\n  //           \"y\": 46\n  //         },\n  //         {\n  //           \"x\": \"helicopter\",\n  //           \"y\": 216\n  //         },\n  //         {\n  //           \"x\": \"boat\",\n  //           \"y\": 33\n  //         },\n  //         {\n  //           \"x\": \"train\",\n  //           \"y\": 152\n  //         },\n  //         {\n  //           \"x\": \"subway\",\n  //           \"y\": 74\n  //         },\n  //         {\n  //           \"x\": \"bus\",\n  //           \"y\": 274\n  //         },\n  //         {\n  //           \"x\": \"car\",\n  //           \"y\": 196\n  //         },\n  //         {\n  //           \"x\": \"moto\",\n  //           \"y\": 60\n  //         },\n  //         {\n  //           \"x\": \"bicycle\",\n  //           \"y\": 2\n  //         },\n  //         {\n  //           \"x\": \"horse\",\n  //           \"y\": 64\n  //         },\n  //         {\n  //           \"x\": \"skateboard\",\n  //           \"y\": 295\n  //         },\n  //         {\n  //           \"x\": \"others\",\n  //           \"y\": 78\n  //         }\n  //       ]\n  //     },\n  //     {\n  //       \"id\": \"france\",\n  //       \"color\": \"hsl(56, 70%, 50%)\",\n  //       \"data\": [\n  //         {\n  //           \"x\": \"plane\",\n  //           \"y\": 251\n  //         },\n  //         {\n  //           \"x\": \"helicopter\",\n  //           \"y\": 210\n  //         },\n  //         {\n  //           \"x\": \"boat\",\n  //           \"y\": 23\n  //         },\n  //         {\n  //           \"x\": \"train\",\n  //           \"y\": 190\n  //         },\n  //         {\n  //           \"x\": \"subway\",\n  //           \"y\": 96\n  //         },\n  //         {\n  //           \"x\": \"bus\",\n  //           \"y\": 27\n  //         },\n  //         {\n  //           \"x\": \"car\",\n  //           \"y\": 87\n  //         },\n  //         {\n  //           \"x\": \"moto\",\n  //           \"y\": 258\n  //         },\n  //         {\n  //           \"x\": \"bicycle\",\n  //           \"y\": 158\n  //         },\n  //         {\n  //           \"x\": \"horse\",\n  //           \"y\": 66\n  //         },\n  //         {\n  //           \"x\": \"skateboard\",\n  //           \"y\": 42\n  //         },\n  //         {\n  //           \"x\": \"others\",\n  //           \"y\": 266\n  //         }\n  //       ]\n  //     },\n  //     {\n  //       \"id\": \"us\",\n  //       \"color\": \"hsl(73, 70%, 50%)\",\n  //       \"data\": [\n  //         {\n  //           \"x\": \"plane\",\n  //           \"y\": 161\n  //         },\n  //         {\n  //           \"x\": \"helicopter\",\n  //           \"y\": 116\n  //         },\n  //         {\n  //           \"x\": \"boat\",\n  //           \"y\": 95\n  //         },\n  //         {\n  //           \"x\": \"train\",\n  //           \"y\": 41\n  //         },\n  //         {\n  //           \"x\": \"subway\",\n  //           \"y\": 20\n  //         },\n  //         {\n  //           \"x\": \"bus\",\n  //           \"y\": 26\n  //         },\n  //         {\n  //           \"x\": \"car\",\n  //           \"y\": 46\n  //         },\n  //         {\n  //           \"x\": \"moto\",\n  //           \"y\": 15\n  //         },\n  //         {\n  //           \"x\": \"bicycle\",\n  //           \"y\": 67\n  //         },\n  //         {\n  //           \"x\": \"horse\",\n  //           \"y\": 76\n  //         },\n  //         {\n  //           \"x\": \"skateboard\",\n  //           \"y\": 158\n  //         },\n  //         {\n  //           \"x\": \"others\",\n  //           \"y\": 272\n  //         }\n  //       ]\n  //     },\n  //     {\n  //       \"id\": \"germany\",\n  //       \"color\": \"hsl(185, 70%, 50%)\",\n  //       \"data\": [\n  //         {\n  //           \"x\": \"plane\",\n  //           \"y\": 149\n  //         },\n  //         {\n  //           \"x\": \"helicopter\",\n  //           \"y\": 132\n  //         },\n  //         {\n  //           \"x\": \"boat\",\n  //           \"y\": 13\n  //         },\n  //         {\n  //           \"x\": \"train\",\n  //           \"y\": 165\n  //         },\n  //         {\n  //           \"x\": \"subway\",\n  //           \"y\": 44\n  //         },\n  //         {\n  //           \"x\": \"bus\",\n  //           \"y\": 49\n  //         },\n  //         {\n  //           \"x\": \"car\",\n  //           \"y\": 156\n  //         },\n  //         {\n  //           \"x\": \"moto\",\n  //           \"y\": 124\n  //         },\n  //         {\n  //           \"x\": \"bicycle\",\n  //           \"y\": 125\n  //         },\n  //         {\n  //           \"x\": \"horse\",\n  //           \"y\": 57\n  //         },\n  //         {\n  //           \"x\": \"skateboard\",\n  //           \"y\": 75\n  //         },\n  //         {\n  //           \"x\": \"others\",\n  //           \"y\": 281\n  //         }\n  //       ]\n  //     },\n  //     {\n  //       \"id\": \"norway\",\n  //       \"color\": \"hsl(127, 70%, 50%)\",\n  //       \"data\": [\n  //         {\n  //           \"x\": \"plane\",\n  //           \"y\": 254\n  //         },\n  //         {\n  //           \"x\": \"helicopter\",\n  //           \"y\": 146\n  //         },\n  //         {\n  //           \"x\": \"boat\",\n  //           \"y\": 103\n  //         },\n  //         {\n  //           \"x\": \"train\",\n  //           \"y\": 118\n  //         },\n  //         {\n  //           \"x\": \"subway\",\n  //           \"y\": 268\n  //         },\n  //         {\n  //           \"x\": \"bus\",\n  //           \"y\": 22\n  //         },\n  //         {\n  //           \"x\": \"car\",\n  //           \"y\": 124\n  //         },\n  //         {\n  //           \"x\": \"moto\",\n  //           \"y\": 205\n  //         },\n  //         {\n  //           \"x\": \"bicycle\",\n  //           \"y\": 281\n  //         },\n  //         {\n  //           \"x\": \"horse\",\n  //           \"y\": 204\n  //         },\n  //         {\n  //           \"x\": \"skateboard\",\n  //           \"y\": 181\n  //         },\n  //         {\n  //           \"x\": \"others\",\n  //           \"y\": 210\n  //         }\n  //       ]\n  //     }\n  //   ]\n\n  //   const MyResponsiveLine = ({ data }) => (\n  //     <ResponsiveLine\n  //         data={data}\n  //         margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n  //         xScale={{ type: 'point' }}\n  //         yScale={{ type: 'linear', min: 'auto', max: 'auto', stacked: true, reverse: false }}\n  //         yFormat=\" >-.2f\"\n  //         axisTop={null}\n  //         axisRight={null}\n  //         axisBottom={{\n  //             orient: 'bottom',\n  //             tickSize: 5,\n  //             tickPadding: 5,\n  //             tickRotation: 0,\n  //             legend: 'transportation',\n  //             legendOffset: 36,\n  //             legendPosition: 'middle'\n  //         }}\n  //         axisLeft={{\n  //             orient: 'left',\n  //             tickSize: 5,\n  //             tickPadding: 5,\n  //             tickRotation: 0,\n  //             legend: 'count',\n  //             legendOffset: -40,\n  //             legendPosition: 'middle'\n  //         }}\n  //         pointSize={10}\n  //         pointColor={{ theme: 'background' }}\n  //         pointBorderWidth={2}\n  //         pointBorderColor={{ from: 'serieColor' }}\n  //         pointLabelYOffset={-12}\n  //         useMesh={true}\n  //         legends={[\n  //             {\n  //                 anchor: 'bottom-right',\n  //                 direction: 'column',\n  //                 justify: false,\n  //                 translateX: 100,\n  //                 translateY: 0,\n  //                 itemsSpacing: 0,\n  //                 itemDirection: 'left-to-right',\n  //                 itemWidth: 80,\n  //                 itemHeight: 20,\n  //                 itemOpacity: 0.75,\n  //                 symbolSize: 12,\n  //                 symbolShape: 'circle',\n  //                 symbolBorderColor: 'rgba(0, 0, 0, .5)',\n  //                 effects: [\n  //                     {\n  //                         on: 'hover',\n  //                         style: {\n  //                             itemBackground: 'rgba(0, 0, 0, .03)',\n  //                             itemOpacity: 1\n  //                         }\n  //                     }\n  //                 ]\n  //             }\n  //         ]}\n  //     />\n  //   )\n  //   return MyResponsiveLine\n  // }\n\n\n  renderChart(data){\n    console.log('RENDER CHART')\n      const ctx = document.getElementById('myChart').getContext('2d');\n      \n      const chart = new Chart(ctx, {\n          // The type of chart we want to create\n          type: 'line',\n\n          // The data for our dataset\n          data: {\n              labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n              datasets: [\n                {\n                  label: 'First dataset',\n                  backgroundColor: 'rgb(255, 99, 132)',\n                  borderColor: 'rgb(255, 99, 132)',\n                  data: [0, 10, 5, 2, 20, 30, 45]\n                },\n                {\n                  label: 'second dataset',\n                  backgroundColor: 'rgb(25, 99, 132)',\n                  borderColor: 'rgb(255, 99, 13)',\n                  data: [0, 4, 6, 2, 14, 24, 60]\n                },\n                {\n                  label: 'third dataset',\n                  backgroundColor: 'rgb(150, 99, 60)',\n                  borderColor: 'rgb(110, 99, 45)',\n                  data: [40, 38, 34, 55, 55, 50, 45]\n                }\n              ]\n          },\n\n          // Configuration options go here\n          options: {}\n      });\n\n      return chart\n  }\n\n\n  render(){\n    return(\n      <div className=\"DetailsMetrics\">\n        <Button variant=\"warning\">\n          <Link to=\"/add-new-metrics\">Add new entry</Link>\n        </Button>\n        <canvas id=\"myChart\"></canvas>\n      </div>\n    )    \n  }\n}\n\nexport default DetailsMetrics"]},"metadata":{},"sourceType":"module"}